+ $LO(<object>) - initialize

+ object.watch(<property>, callback) - watch property

+ object.watch('*', callback(new_value, old_value, path)) - watch all properties

+ $LO(<object>).watch().watch().watch()...  - chainable watchers

{
	a: function(){
		/* computed */
	}
}  - computed property


+ $LO.version - get current version

+ arrays support


+ всплывание события




//---------------------------------------


- refactor setter definition L54-L79
- refactor specs
- refactor get_path method







для массивов следить за length
var aa = Object.create(Array.prototype, {length: {get: function(){ return 1 }, set: function(nv){ console.log(666, nv) }}})

http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/


examples = ->

  #watch push
  eee = [1,2]
  eee.push = (arg) ->
    callback()
    Array.prototype.push.call(@, arg)

  # Object methods
  Object.getOwnPropertyNames(Array.prototype)

  #lookup setters/getters
  Object.getOwnPropertyDescriptor(obj, key)

  #фризить объект
  #на добавлении нового свойства через точечную нотацию
  #ловить typeerror и переопределть объект заново




брать описание как скриншот из mocha тестов
